---
- name: Managing Credentials
  credential:
    name: "{{ __controller_credentials_item.name | mandatory }}"
    new_name: "{{ __controller_credentials_item.new_name | default(omit, true) }}"
    copy_from: "{{ __controller_credentials_item.copy_from | default(omit, true) }}"
    description: "{{ __controller_credentials_item.description | default(('' if controller_configuration_credentials_enforce_defaults else omit), true) }}"
    organization: "{{ __controller_credentials_item.organization.name | default(__controller_credentials_item.organization | default(omit, true)) }}"
    credential_type: "{{ __controller_credentials_item.credential_type.name | default(__controller_credentials_item.credential_type | mandatory) }}"
    inputs: "{{ __controller_credentials_item.inputs | default(({} if controller_configuration_credentials_enforce_defaults else omit), true) }}"
    user: "{{ __controller_credentials_item.user.username | default(__controller_credentials_item.user | default(omit, true)) }}"
    team: "{{ __controller_credentials_item.team.name | default(__controller_credentials_item.team | default(omit, true)) }}"
    update_secrets: "{{ __controller_credentials_item.update_secrets | default(true if controller_configuration_credentials_enforce_defaults else omit) }}"
    state: "{{ __controller_credentials_item.state | default(platform_state | default('present')) }}"

    # Role specific options
    controller_username: "{{ aap_username | default(omit, true) }}"
    controller_password: "{{ aap_password | default(omit, true) }}"
    controller_oauthtoken: "{{ aap_token | default(omit, true) }}"
    controller_host: "{{ aap_hostname | default(omit, true) }}"
    request_timeout: "{{ aap_request_timeout | default(omit, true) }}"
    validate_certs: "{{ aap_validate_certs | default(omit) }}"
  loop: "{{ credentials if credentials is defined else controller_credentials }}"
  loop_control:
    loop_var: __controller_credentials_item
    label: "{{ __operation.verb }} Credential {{ __controller_credentials_item.name }}"
    pause: "{{ controller_configuration_credentials_loop_delay }}"
  no_log: "{{ controller_configuration_credentials_secure_logging }}"
  async: "{{ ansible_check_mode | ternary(0, 1000) }}"
  poll: 0
  register: __credentials_job_async
  changed_when: (__credentials_job_async.changed if ansible_check_mode else false)
  vars:
    __operation: "{{ operation_translate[__controller_credentials_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"

- name: Flag for errors (check mode only)
  ansible.builtin.set_fact:
    error_flag: true
  when: ansible_check_mode and __credentials_job_async.failed is defined and __credentials_job_async.failed

- name: Managing Controller Credentials | Wait for finish the credential management
  ansible.builtin.async_status:
    jid: "{{ __credentials_job_async_results_item.ansible_job_id }}"
  register: __credentials_job_async_result
  until: __credentials_job_async_result.finished
  retries: "{{ controller_configuration_credentials_async_retries }}"
  delay: "{{ controller_configuration_credentials_async_delay }}"
  loop: "{{ __credentials_job_async.results }}"
  loop_control:
    loop_var: __credentials_job_async_results_item
    label: "{{ __operation.verb }} Credential {{ __credentials_job_async_results_item.__controller_credentials_item.name }} | Wait for finish the credential {{ __operation.action
      }}"
  when: not ansible_check_mode and __credentials_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_credentials_secure_logging }}"
  vars:
    __operation: "{{ operation_translate[__controller_credentials_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"
...
