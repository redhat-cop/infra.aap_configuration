# Update or destroy Automation Hub Collection
---
# Test if this is still needed
# - name: Get token
#   ansible.hub.ah_token:
#     ah_host:               "{{ aap_hostname | default(omit) }}"
#     ah_username:          "{{ aap_username | default(omit) }}"
#     ah_password:           "{{ aap_password | default(omit) }}"
#     ah_path_prefix:        "{{ ah_path_prefix | default(omit) }}"
#     validate_certs:        "{{ aap_validate_certs | default(omit) }}"
#     request_timeout:       "{{ aap_request_timeout | default(omit) }}"
#   when:
#     - ah_token is not defined
#     - lookup("ansible.builtin.env", "AH_API_TOKEN") == ""
#     - ah_collections | length > 1

- name: Update or destroy Automation Hub Collection
  ansible.hub.ah_collection:
    namespace: "{{ __collections_item.namespace }}"
    name: "{{ __collections_item.name }}"
    version: "{{ __collections_item.version | default(omit) }}"
    path: "{{ __collections_item.path | default(omit) }}"
    repository: "{{ __collections_item.repository | default(omit) }}"
    wait: "{{ __collections_item.wait | default(omit) }}"
    auto_approve: "{{ __collections_item.auto_approve | default(omit) }}"
    timeout: "{{ __collections_item.timeout | default(omit) }}"
    interval: "{{ __collections_item.interval | default(omit) }}"
    overwrite_existing: "{{ __collections_item.overwrite_existing | default(omit) }}"
    state: "{{ __collections_item.state | default('present') }}"
    ah_host: "{{ aap_hostname | default(omit) }}"
    ah_username: "{{ aap_username | default(omit) }}"
    ah_password: "{{ aap_password | default(omit) }}"
    ah_token: "{{ aap_token | default(omit) }}"
    ah_path_prefix: "{{ ah_path_prefix | default(omit) }}"
    validate_certs: "{{ aap_validate_certs | default(omit) }}"
    request_timeout: "{{ aap_request_timeout | default(omit) }}"
  loop: "{{ ah_collections }}"
  loop_control:
    loop_var: __collections_item
    label: "{{ __operation.verb }} the label {{ __ah_configuration_collection__item.name }} to Controller"
    pause: "{{ ah_configuration_collection__loop_delay }}"
  no_log: "{{ ah_configuration_collection_secure_logging }}"
  async: "{{ ah_configuration_collection_async_timeout }}"
  poll: 0
  register: __collections_job_async
  changed_when: not __collections_job_async.changed
  vars:
    __operation: "{{ operation_translate[__collections_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"

- name: Sleep for 10 seconds and continue with play
  ansible.builtin.wait_for:
    timeout: 10

- name: Update/Destroy collection | Wait for finish the update/destruction of collection
  ansible.builtin.async_status:
    jid: "{{ __collections_job_async_result_item.ansible_job_id }}"
  register: __collections_job_async_result
  until: __collections_job_async_result.finished
  retries: "{{ ah_configuration_collection_async_retries }}"
  delay: "{{ ah_configuration_collection_async_delay }}"
  loop: "{{ __collections_job_async.results }}"
  loop_control:
    loop_var: __collections_job_async_result_item
    label: "{{ __operation.verb }} Label {{ __collections_job_async_result_item.__collections_item.name }} | Wait for finish the Label {{ __operation.action }}"
  when: __collections_job_async_result_item.ansible_job_id is defined
  no_log: "{{ ah_configuration_collection_secure_logging }}"
  vars:
    __operation: "{{ operation_translate[__collections_job_async_result_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"
...
