---
# The group module is also an ansible.builtin module, but due to supporting both the awx.awx and automation.controller collections
# the FQCN cannot be used here.
- name: Managing Controller Groups # noqa fqcn[action-core]
  group:
    name: "{{ __controller_groups_item.name | mandatory }}"
    new_name: "{{ __controller_groups_item.new_name | default(omit, true) }}"
    description: "{{ __controller_groups_item.description | default(('' if controller_configuration_groups_enforce_defaults else omit), true) }}"
    inventory: "{{ __controller_groups_item.inventory | mandatory }}"
    variables: "{{ __controller_groups_item.variables | default(({} if controller_configuration_groups_enforce_defaults else omit), true) | regex_replace('{  {',
      '{_~~remove~~_{') | regex_replace('_~~remove~~_', '') }}"
    hosts: "{{ __controller_groups_item.hosts | default(([] if controller_configuration_groups_enforce_defaults else omit), true) }}"
    children: "{{ __controller_groups_item.children | default(([] if controller_configuration_groups_enforce_defaults else omit), true) }}"
    preserve_existing_hosts: "{{ __controller_groups_item.preserve_existing_hosts | default((false if controller_configuration_groups_enforce_defaults else omit))
      }}"
    preserve_existing_children: "{{ __controller_groups_item.preserve_existing_children | default((false if controller_configuration_groups_enforce_defaults else
      omit)) }}"
    state: "{{ __controller_groups_item.state | default(platform_state | default('present')) }}"

    # Role Standard Options
    controller_username: "{{ aap_username | default(omit, true) }}"
    controller_password: "{{ aap_password | default(omit, true) }}"
    controller_oauthtoken: "{{ aap_token | default(omit, true) }}"
    request_timeout: "{{ aap_request_timeout | default(omit, true) }}"
    controller_host: "{{ aap_hostname | default(omit, true) }}"
    validate_certs: "{{ aap_validate_certs | default(omit) }}"
  loop: "{{ controller_groups }}"
  loop_control:
    loop_var: __controller_groups_item
    label: "{{ __operation.verb }} Controller Group {{ __controller_groups_item.name }}"
    pause: "{{ controller_configuration_group_loop_delay }}"
  no_log: "{{ controller_configuration_group_secure_logging }}"
  async: "{{ ansible_check_mode | ternary(0, 1000) }}"
  poll: 0
  register: __group_job_async
  changed_when: (__group_job_async.changed if ansible_check_mode else false)
  vars:
    __operation: "{{ operation_translate[__controller_groups_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"

- name: Flag for errors (check mode only)
  ansible.builtin.set_fact:
    error_flag: true
  when: ansible_check_mode and __group_job_async.failed is defined and __group_job_async.failed

- name: Managing Controller Groups | Wait for finish the Controller Groups management
  ansible.builtin.async_status:
    jid: "{{ __group_job_async_results_item.ansible_job_id }}"
  register: __group_job_async_result
  until: __group_job_async_result.finished
  retries: "{{ controller_configuration_group_async_retries }}"
  delay: "{{ controller_configuration_group_async_delay }}"
  loop: "{{ __group_job_async.results }}"
  loop_control:
    loop_var: __group_job_async_results_item
    label: "{{ __operation.verb }} Controller Group {{ __group_job_async_results_item.__controller_groups_item.name }} | Wait for finish the Controller Group {{ __operation.action
      }}"
  when: not ansible_check_mode and __group_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_group_secure_logging }}"
  vars:
    __operation: "{{ operation_translate[__group_job_async_results_item.__controller_groups_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"
...
