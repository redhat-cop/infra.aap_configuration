---
- name: Managing Projects
  project:
    name: "{{ __controller_project_item.name | mandatory }}"
    new_name: "{{ __controller_project_item.new_name | default(omit, true) }}"
    copy_from: "{{ __controller_project_item.copy_from | default(omit, true) }}"
    description: "{{ __controller_project_item.description | default(('' if controller_configuration_projects_enforce_defaults else omit), true) }}"
    scm_type: "{{ __controller_project_item.scm_type | default('manual') }}"
    scm_url: "{{ __controller_project_item.scm_url | default(('' if controller_configuration_projects_enforce_defaults else omit), true) }}"
    default_environment: "{{ __controller_project_item.default_environment | default(omit, true) }}"
    local_path: "{{ __controller_project_item.local_path | default(('' if controller_configuration_projects_enforce_defaults else omit), true) }}"
    scm_branch: "{{ __controller_project_item.scm_branch | default(('' if controller_configuration_projects_enforce_defaults else omit)) }}"
    scm_refspec: "{{ __controller_project_item.scm_refspec | default(('' if controller_configuration_projects_enforce_defaults else omit), true) }}"
    credential: "{{ __controller_project_item.credential.name | default(__controller_project_item.credential | default(__controller_project_item.scm_credential |
      default(omit, true))) }}"
    signature_validation_credential: "{{ __controller_project_item.signature_validation_credential.name | default(__controller_project_item.signature_validation_credential
      | default(omit, true)) }}"
    scm_clean: "{{ __controller_project_item.scm_clean | default((false if controller_configuration_projects_enforce_defaults else omit)) }}"
    scm_delete_on_update: "{{ __controller_project_item.scm_delete_on_update | default((false if controller_configuration_projects_enforce_defaults else omit)) }}"
    scm_track_submodules: "{{ __controller_project_item.scm_track_submodules | default((false if controller_configuration_projects_enforce_defaults else omit)) }}"
    scm_update_on_launch: "{{ __controller_project_item.scm_update_on_launch | default((false if controller_configuration_projects_enforce_defaults else omit)) }}"
    scm_update_cache_timeout: "{{ __controller_project_item.scm_update_cache_timeout | default(0, true) if __controller_project_item.scm_update_cache_timeout is defined
      or controller_configuration_projects_enforce_defaults else omit }}"
    allow_override: "{{ __controller_project_item.allow_override | default((false if controller_configuration_projects_enforce_defaults else omit)) }}"
    timeout: "{{ __controller_project_item.job_timeout | default(__controller_project_item.timeout | default(0, true) if __controller_project_item.timeout is defined
      or __controller_project_item.job_timeout is defined or controller_configuration_projects_enforce_defaults else omit) }}"
    custom_virtualenv: "{{ __controller_project_item.custom_virtualenv | default(('' if controller_configuration_projects_enforce_defaults else omit), true) }}"
    organization: "{{ __controller_project_item.organization.name | default(__controller_project_item.organization | default(('' if controller_configuration_projects_enforce_defaults
      else omit))) }}"
    state: "{{ __controller_project_item.state | default(platform_state | default('present')) }}"
    wait: "{{ __controller_project_item.wait | default((true if controller_configuration_projects_enforce_defaults else omit)) }}"
    update_project: "{{ __controller_project_item.update_project | default((false if controller_configuration_projects_enforce_defaults else omit)) }}"
    interval: "{{ __controller_project_item.interval | default(controller_configuration_projects_async_delay) }}"
    notification_templates_started: "{{ (__controller_project_item.related.notification_templates_started | map(attribute='name') | list if __controller_project_item.related.notification_templates_started
      is defined) | default(__controller_project_item.notification_templates_started) | default(([] if controller_configuration_projects_enforce_defaults else omit),
      true) }}"
    notification_templates_success: "{{ (__controller_project_item.related.notification_templates_success | map(attribute='name') | list if __controller_project_item.related.notification_templates_success
      is defined) | default(__controller_project_item.notification_templates_success) | default(([] if controller_configuration_projects_enforce_defaults else omit),
      true) }}"
    notification_templates_error: "{{ (__controller_project_item.related.notification_templates_error | map(attribute='name') | list if __controller_project_item.related.notification_templates_error
      is defined) | default(__controller_project_item.notification_templates_error) | default(([] if controller_configuration_projects_enforce_defaults else omit),
      true) }}"

    # Role Standard Options
    controller_username: "{{ aap_username | default(omit, true) }}"
    controller_password: "{{ aap_password | default(omit, true) }}"
    controller_oauthtoken: "{{ aap_token | default(omit, true) }}"
    request_timeout: "{{ aap_request_timeout | default(omit, true) }}"
    controller_host: "{{ aap_hostname | default(omit, true) }}"
    validate_certs: "{{ aap_validate_certs | default(omit) }}"
  loop: "{{ projects if projects is defined else controller_projects }}"
  loop_control:
    loop_var: __controller_project_item
    label: "{{ __operation.verb }} Project {{ __controller_project_item.name }}"
    pause: "{{ controller_configuration_projects_loop_delay }}"
  no_log: "{{ controller_configuration_projects_secure_logging }}"
  async: "{{ ansible_check_mode | ternary(0, 1000) }}"
  poll: 0
  register: __projects_job_async
  changed_when: (__projects_job_async.changed if ansible_check_mode else false)
  vars:
    __operation: "{{ operation_translate[__controller_project_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"

- name: Flag for errors (check mode only)
  ansible.builtin.set_fact:
    error_flag: true
  when: ansible_check_mode and __projects_job_async.failed is defined and __projects_job_async.failed

- name: Managing Projects | Wait for finish the projects management
  ansible.builtin.async_status:
    jid: "{{ __projects_job_async_results_item.ansible_job_id }}"
  register: __projects_job_async_result
  until: __projects_job_async_result.finished
  retries: "{{ controller_configuration_projects_async_retries }}"
  delay: "{{ controller_configuration_projects_async_delay }}"
  loop: "{{ __projects_job_async.results }}"
  loop_control:
    loop_var: __projects_job_async_results_item
    label: "{{ __operation.verb }} Project {{ __projects_job_async_results_item.__controller_project_item.name }} | Wait for finish the project {{ __operation.action
      }}"
  when: not ansible_check_mode and __projects_job_async_results_item.ansible_job_id is defined
  no_log: "{{ controller_configuration_projects_secure_logging }}"
  vars:
    __operation: "{{ operation_translate[__projects_job_async_results_item.__controller_project_item.state | default(platform_state) | default('present')] }}"
    ansible_async_dir: "{{ aap_configuration_async_dir }}"
...
